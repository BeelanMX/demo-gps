
var express = require('express')
  , routes = require('./routes')
  , user = require('./routes/user')
  , http = require('http')
  , path = require('path');
const fs = require('fs');

var math = require('mathjs');
var convertHex = require('convert-hex')

var app = express();
var server = http.createServer(app);
var io = require('socket.io').listen(server);

var mqtt = require('mqtt');
var client  = mqtt.connect('http://198.199.97.15', {username:'master', password:'f4rm1nGC'})

var pos;

// all environments
app.set('port', process.env.PORT || 3000);
app.set('views', __dirname + '/views');
app.set('view engine', 'jade');
app.use(express.favicon());
app.use(express.logger('dev'));
app.use(express.bodyParser());
app.use(express.methodOverride());
app.use(app.router);
app.use(require('stylus').middleware(__dirname + '/public'));
app.use(express.static(path.join(__dirname, 'public')));

// development only
if ('development' == app.get('env')) {
  app.use(express.errorHandler());
}

app.get('/', routes.index);
app.get('/users', user.list);


client.on('connect', function () {
  client.subscribe('application/2220000000000000/node/0000000000000022/rx')
  client.publish('presence', 'Hello mqtt')
})
/*
const url = 'web.beelan.mx/'; /// API
const headers = {
  'Content-Type': 'application/json',
  'Authoritation': '' /// TOKEN
}
const options = {
  method: 'GET',
  headers
}
// ------------------------------------------------------------  //
const getData = async () => {
  const api = await fetch(url, options);
  return api;
}*/

client.on('message', function (topic, message) {
  // message is Buffer
  var json = message.toString();
  var msg = JSON.parse(json);
  console.log(msg);
  console.log(msg.data);


  var hexa = new Buffer.from(msg.data, 'base64').toString('hex');
  console.log(hexa);
  var data = parseHexString(hexa);
  console.log(data);
  for (var i = 2; i < 12; i++) {
    console.log(data[i]);
  }
  console.log();
  pos = {
     lat: (data[4] + (data[3] << 8) + (data[2] <<16 )) / 10000,
     lng: (-1)*((data[7] + (data[6] << 8) + (data[5] <<16 )) / 10000),
     alt: ((data[10] + (data[9] << 8) + (data[8] <<16 )) / 100)
  };

  //lat = (data[0] + (data[1] << 8) + (data[2] <<16 )) / 10000
  //lon = (-1)*((data[3] + (data[4] << 8) + (data[5] <<16 )) / 10000)
  console.log(pos);
});


io.sockets.on('connection', function(socket){
	socket.on('coords:me', function(data){
		console.log(data);
		socket.broadcast.emit('coords:user', data);
	});
  socket.emit('coords:gps', {
         latlng: pos
      });
});


function parseHexString(str) {
    var result = [];
    while (str.length >= 2) {
        result.push(parseInt(str.substring(0, 2), 16));
        str = str.substring(2, str.length);
    }

    return result;
}


server.listen(app.get('port'), function(){
  console.log('Express server listening on port ' + app.get('port'));
});
